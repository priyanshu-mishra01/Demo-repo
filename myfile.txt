# Let's create the required content for each file and save it into a single text file.

project_files_content = """
File: src/main/java/com/example/studentmanagement/StudentManagementApplication.java
---
package com.example.studentmanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class StudentManagementApplication {
    public static void main(String[] args) {
        SpringApplication.run(StudentManagementApplication.class, args);
    }
}

---
File: src/main/java/com/example/studentmanagement/config/SwaggerConfig.java
---
package com.example.studentmanagement.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("com.example.studentmanagement.controller"))
                .paths(PathSelectors.any())
                .build();
    }
}

---
File: src/main/java/com/example/studentmanagement/controller/StudentController.java
---
package com.example.studentmanagement.controller;

import com.example.studentmanagement.entity.Subject;
import com.example.studentmanagement.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/students")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @GetMapping("/{id}/subjects")
    public ResponseEntity<List<Subject>> getStudentSubjects(@PathVariable Long id) {
        return ResponseEntity.ok(studentService.getSubjects(id));
    }

    @GetMapping("/{id}/elective")
    public ResponseEntity<Subject> getElectiveSubject(@PathVariable Long id) {
        return ResponseEntity.ok(studentService.getElectiveSubject(id));
    }
}

---
File: src/main/java/com/example/studentmanagement/entity/Student.java
---
package com.example.studentmanagement.entity;

import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.time.LocalDate;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 30)
    private String firstName;

    @NotBlank
    @Size(max = 30)
    private String lastName;

    @NotNull
    @Past
    private LocalDate dateOfBirth;

    @ManyToMany
    @JoinTable(name = "student_subjects", joinColumns = @JoinColumn(name = "student_id"), inverseJoinColumns = @JoinColumn(name = "subject_id"))
    @Size(max = 6)
    private List<Subject> subjects;

    @ManyToOne
    private Subject electiveSubject;

    @ManyToOne
    private Mentor mentor;
}

---
File: src/main/java/com/example/studentmanagement/entity/Subject.java
---
package com.example.studentmanagement.entity;

import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import javax.persistence.*;
import javax.validation.constraints.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Subject {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Pattern(regexp = "\\d{6}", message = "Subject code must be a 6-digit number")
    private String subjectCode;

    @NotBlank
    @Size(max = 30)
    private String subjectName;
}

---
File: src/main/java/com/example/studentmanagement/entity/Mentor.java
---
package com.example.studentmanagement.entity;

import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import javax.persistence.*;
import javax.validation.constraints.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Mentor {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Column(unique = true)
    private String name;

    @NotBlank
    @Pattern(regexp = "\\d{10}", message = "Phone number must be 10 digits")
    private String phoneNumber;
}

---
File: src/main/java/com/example/studentmanagement/service/StudentService.java
---
package com.example.studentmanagement.service;

import com.example.studentmanagement.entity.Student;
import com.example.studentmanagement.entity.Subject;
import com.example.studentmanagement.repository.StudentRepository;
import com.example.studentmanagement.exception.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {

    @Autowired
    private StudentRepository studentRepository;

    public Student getStudentById(Long id) {
        return studentRepository.findById(id).orElseThrow(() -> new ValidationException("Student not found"));
    }

    public List<Subject> getSubjects(Long studentId) {
        Student student = getStudentById(studentId);
        return student.getSubjects();
    }

    public Subject getElectiveSubject(Long studentId) {
        Student student = getStudentById(studentId);
        return student.getElectiveSubject();
    }

    public Student assignMentor(Long studentId, Mentor mentor) {
        Student student = getStudentById(studentId);
        student.setMentor(mentor);
        return studentRepository.save(student);
    }
}

---
File: src/main/java/com/example/studentmanagement/exception/ValidationException.java
---
package com.example.studentmanagement.exception;

public class ValidationException extends RuntimeException {
    public ValidationException(String message) {
        super(message);
    }
}

---
File: src/main/java/com/example/studentmanagement/exception/GlobalExceptionHandler.java
---
package com.example.studentmanagement.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<String> handleValidationException(ValidationException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
    }
}

---
File: src/main/resources/application.properties
---
spring.datasource.url=jdbc:postgresql://localhost:5432/studentdb
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

---
File: pom.xml
---
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-boot-starter</artifactId>
        <version>3.0.0</version>
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.20</version>
        <scope>provided</scope>
    </dependency>
</dependencies>
"""

# Save this content to a text file
file_path = '/mnt/data/student_management_project.txt'
with open(file_path, 'w') as f:
    f.write(project_files_content)

file_path  # Return the path to the created file.
